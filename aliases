# Get External IP / local IPs
alias ip="curl ipinfo.io/ip"
alias ips="ifconfig -a | perl -nle'/(\d+\.\d+\.\d+\.\d+)/ && print $1'"
alias speedtest="wget -O /dev/null http://speedtest.wdc01.softlayer.com/downloads/test10.zip"

# Quick Tunnel (For unprotected Wifi)
alias tunnel='~/code/python/sshuttle/sshuttle --dns \
              --daemon --pidfile=/tmp/sshuttle.pid --remote=chaton 0/0'
alias tunnelx='[[ -f /tmp/sshuttle.pid ]] && kill $(cat /tmp/sshuttle.pid) && echo "Disconnected."'

# Quickly serve the current directory as HTTP
alias serve='ruby -run -e httpd . -p 8000'  # Or python -m SimpleHTTPServer :)

# Rails bundler shorter
alias be='bundle exec'
alias bi='bundle install'

# Github Awesomeness
alias org-pr='hub pull-request -h \
  `git remote -v | grep -oE -m1 "github.com:([^/]*)" \
  | sed "s/github.com://"`:`git rev-parse --abbrev-ref HEAD`'


# Rake
alias rake="noglob rake"


alias subl='/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl'
alias st='cd Library/Application\ Support/Sublime\ Text/Packages/'

alias cuc='bundle exec cucumber'

# get my ip
alias myip='curl ifcfg.me'

alias mylocalip='ifconfig |grep inet'


# heroku-toolbelt
alias hca='heroku run rails console --app alerti'
alias hcac='heroku run rails console --app alerti-crawler'
alias hcas='heroku run rails console --app alerti-staging'
alias hcasc='heroku run rails console --app alerti-crawler-staging'

alias glg='git lg1'
alias glg10='git lg1 -10'

alias help='cheat'

alias ls='ls -al'

# get a local server
# ex: localserver http 3001
alias localserver='~/Desktop/ngrok'
alias server='~/Desktop/ngrok'

# tail rails development logs
alias logd='tail -f log/development.log'

alias q=bin/quality
alias tailt='tail -f log/test.log'


alias hcc="heroku run rails console -a cocolis-api"
alias hcs="heroku run rails console -a staging-cocolis-api"
alias hlc="heroku logs -t -a cocolis-api"
alias hls="heroku logs -t -a staging-cocolis-api"

alias jc="cd ~/projects/clients/cocolis/cocolis-api"
alias jfo="cd ~/projects/clients/cocolis/cocolis-fo"
alias je="cd ~/projects/clients/epicery/api"
alias jew="cd ~/projects/clients/epicery/web"
alias mig="rake db:migrate"
alias migt="rake db:migrate RAILS_ENV=test"
alias rce="bin/connect.sh dev rails console"
alias rcet="bin/connect.sh testing-local rails console"
alias rse="bin/connect.sh dev rails server"
alias rset="bin/connect.sh testing-local rails console"
alias switchc="brew unlink proj && brew uninstall proj --ignore-dependencies && brew install sethdeckard/proj/proj"
alias switche="brew unlink proj && brew install proj"

alias ra="rubocop -a"

hlpr() {
  heroku logs -t -a "cocolis-api-pr-$1"
}

hcpr() {
  heroku run rails console -a "cocolis-api-pr-$1"
}

confpr() {
  heroku config -a "cocolis-api-pr-$1"
}

reloaddbcocolis() {
    bin/rails db:environment:set RAILS_ENV=development
    rails db:drop
    rails db:create
    rails db:migrate
    heroku pg:backups:download -a staging-cocolis-api
    pg_restore --verbose --clean --no-acl --no-owner -h localhost -d cocolis_v3_development ./latest.dump
    rm ./latest.dump
}

linkprcc() {
  heroku config:set API_URL="https://cocolis-api-pr-$1.herokuapp.com/api/v1" -a cocolis-fo-br-cc-$2-dummy &&  heroku config:set FRONTEND_URL="https://cocolis-fo-br-cc-$2-dummy.herokuapp.com" -a cocolis-api-pr-$1
}

linkprdevelop() {
  heroku config:set API_URL="https://cocolis-api-pr-$1.herokuapp.com/api/v1" -a cocolis-fo-br-develop &&  heroku config:set FRONTEND_URL="https://cocolis-fo-br-develop.herokuapp.com" -a cocolis-api-pr-$1
  heroku config:set BONSAI_URL="$(heroku config  -a cocolis-api-pr-$1 | grep 'BONSAI_URL' | sed 's/BONSAI_URL:                      //g')" -a cocolis-fo-br-develop
}

linkprmaster() {
  heroku config:set API_URL="https://cocolis-api-pr-$1.herokuapp.com/api/v1" -a cocolis-fo-br-master &&  heroku config:set FRONTEND_URL="https://cocolis-fo-br-master.herokuapp.com" -a cocolis-api-pr-$1
  heroku config:set BONSAI_URL="$(heroku config  -a cocolis-api-pr-$1 | grep 'BONSAI_URL' | sed 's/BONSAI_URL:                      //g')" -a cocolis-fo-br-master
}

